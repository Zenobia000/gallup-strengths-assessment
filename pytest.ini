[tool:pytest]
# Pytest 設定檔 - Gallup 優勢測驗專案
# 遵循 structure_guide.md 測試架構

# 測試發現規則
testpaths = src/test
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# 測試標記定義
markers =
    unit: 單元測試標記
    integration: 整合測試標記
    e2e: 端到端測試標記
    slow: 慢速測試標記 (>1秒)
    performance: 效能測試標記
    security: 安全測試標記
    smoke: 煙霧測試標記 (快速驗證)
    regression: 回歸測試標記

# 輸出設定
addopts =
    -v
    --tb=short
    --strict-markers
    --strict-config
    --cov=src/main/python
    --cov-report=term-missing
    --cov-report=html:output/coverage
    --cov-report=xml:output/coverage.xml
    --cov-fail-under=80
    --junit-xml=output/junit.xml

# 效能設定
timeout = 300
timeout_method = thread

# 平行執行設定 (需要安裝 pytest-xdist)
# 使用 -n auto 自動偵測 CPU 核心數
# addopts += -n auto

# 過濾警告
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:sqlalchemy.*
    ignore:.*unclosed.*:ResourceWarning

# 最低 Python 版本
minversion = 3.8

# 測試資料目錄
testmon_datadir = output/.testmondata

# 測試快取設定
cache_dir = output/.pytest_cache

# 日誌設定
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = output/logs/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(funcName)s(): %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# 自動使用 fixtures
usefixtures = cleanup_test_data